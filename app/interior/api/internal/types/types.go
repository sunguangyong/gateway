// Code generated by goctl. DO NOT EDIT.
package types

type ProtoDeployResponse struct {
	FailArray    []DeployMsg `json:"failArray"`    // 失败列表
	SuccessArray []DeployMsg `json:"successArray"` // 成功列表
}

type DeployMsg struct {
	ConfigData NeDeviceDataAccessConfig `json:"configData"`
	Msg        string                   `json:"msg"`
}

type DeployDevice struct {
	DeviceNid  int64        `json:"deviceNid"` // 设备ID
	ConfigData []ConfigData `json:"configData"`
}

type ProtoDeployRequest struct {
	DataList []DeployDevice `json:"list"`
}

type ProtoStopRequest struct {
	Nids []int64 `json:"nids"` // 协议id
}

type ProtoStopResponse struct {
	SucceedNids []int64 `json:"succeedNids"`
	FailNids    []int64 `json:"failNids"`
}

type ProtoDeleteResponse struct {
	SucceedNids []int64 `json:"succeedNids"`
	FailNids    []int64 `json:"failNids"`
}

type ProtoDeleteRequest struct {
	Nids []int64 `json:"nids"` // 协议id
}

type ProtoTestRequest struct {
	Nid int64 `json:"nid"` // 协议id
}

type ProtoTestResponse struct {
	Ok  bool   `json:"ok"`
	Msg string `json:"msg"`
}

type HeartBeatRequest struct {
}

type HeartBeatRequestResponse struct {
}

type ConfigData struct {
	Config NeDeviceDataAccessConfig `json:"config"` // 协议配置
	Point  []NeDeviceDataAccessItem `json:"point"`  // 点表配置
}

type NeDeviceDataAccessConfig struct {
	Nid               int64  `json:"nid"`                 // 主键ID
	DeviceNid         int64  `json:"device_nid"`          // 设备ID
	ConfigType        int64  `json:"config_type"`         // 0-读/写,1-只读,2-只写
	ConfigId          string `json:"config_id"`           // 配置ID
	ConfigName        string `json:"config_name"`         // 配置名称
	Endpoint          string `json:"endpoint"`            // 连接URL
	Protocol          string `json:"protocol"`            // 访问协议：ModbusTcp, ModbusRtu, OpcUa, HTTP, MTCONNECT, MITSUBISH_MC, SIEMENS_S7, OMRON_SINS
	JsonAccessOptions string `json:"json_access_options"` // 访问连接基本配置(JSON格式)
	Timeout           int64  `json:"timeout"`             // 连接超时时间
	AgwId             int64  `json:"agw_id"`              // 所属网关ID
	TenantId          int64  `json:"tenant_id"`           // 租户ID
	ProfileNid        int64  `json:"profile_nid"`         // 设备配置文件ID
	CreateTime        string `json:"create_time"`         // 创建时间
	CreateBy          int64  `json:"create_by"`           // 创建者ID
	Issued            int64  `json:"issued"`              // 是否已下发：1-是,0-否
	IssueTime         string `json:"issue_time"`          // 下发时间
}

type NeDeviceDataAccessItem struct {
	Nid        int64  `json:"nid"`         // 主键
	DeviceNid  int64  `json:"device_nid"`  // 设备ID
	AgwId      int64  `json:"agw_id"`      // 所属网关ID
	TenantId   int64  `json:"tenant_id"`   // 租户ID
	ConfigNid  int64  `json:"config_nid"`  // ne_device_data_access_config.id
	ConfigType int64  `json:"config_type"` // 0-读/写,1-只读,2-只写
	AccessData string `json:"access_data"` // 读/写配置项(JSON对象)
	CreateTime string `json:"create_time"` // 创建时间
}

type OpcUaJsonOptions struct {
	Protocol string `json:"protocol"` // 协议名称
	UserName string `json:"userName"` // 用户名
	PassWd   string `json:"passWd"`   // 密码
	Policy   string `json:"policy"`   // 端点2 加密策略
	Mode     string `json:"mode"`     // 端点1 模式
	Cert     bool   `json:"cert"`     // 是否需要证书
}

type OpcUaJsonItems struct {
	Protocol string `json:"protocol"` // 协议名称
	NodeId   string `json:"nodeId"`   // 节点Id
	DataName string `json:"dataName"` // 数据名称
	Method   string `json:"method"`   // 读取方法
}

type ModbusTcpJsonOptions struct {
	Protocol string `json:"protocol"` // 协议类型
	SlaveId  byte   `json:"slaveId"`  // 从站地址
}

type ModbusTcpJsonItems struct {
	Protocol string `json:"protocol"` // 协议
	Address  uint16 `json:"address"`  // 地址位
	DataName string `json:"dataName"` // 数据名称
	Method   string `json:"method"`   // 读取方法
}

type ModbusRtuJsonOptions struct {
	Protocol string `json:"protocol"` // 协议名称
	SlaveId  byte   `json:"slaveId"`  // 从站地址
	BaudRate int    `json:"baudRate"` // 波特率
	DataBits int    `json:"dataBits"` // 数据位
	StopBits int    `json:"stopBits"` // 停止位
	Parity   string `json:"parity"`   // 校验方式
}

type ModbusRtuJsonItems struct {
	Protocol string `json:"protocol"` // 协议
	Address  uint16 `json:"address"`  // 地址位
	DataName string `json:"dataName"` // 数据名称
	Method   string `json:"method"`   // 读取方法
}

type ProtocolTestRequest struct {
	AgwId       int64   `json:"agwId"`       // 网关id
	NeDeviceIds []int64 `json:"neDeviceIds"` // 设备id
}

type ProtocolTestResponse struct {
	DeviceName  string    `json:"deviceName"`
	Timestamp   string    `json:"timestamp"`
	ContentList []Content `json:"contentList"`
}

type Content struct {
	Addr      interface{} `json:"addr"`
	AddrValue interface{} `json:"addrValue"`
}

type ProtocolWriteTestRequest struct {
	AgwId      int64  `json:"agwId"`      // 网关id
	Address    uint16 `json:"address"`    // 地址位
	Method     string `json:"method"`     // 属性方法
	NeDeviceId int64  `json:"neDeviceId"` // 设备id
	ConfigNid  int64  `json:"configNid"`  // 协议id
	DataName   string `json:"dataName"`   // 属性名
	Nid        int64  `json:"nid"`        // 点表id
	Value      string `json:"value"`      // 写入值
}

type ProtocolWriteTestResponse struct {
}
