// Code generated by MockGen. DO NOT EDIT.
// Source: protofactory.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProtocol is a mock of Protocol interface.
type MockProtocol struct {
	ctrl     *gomock.Controller
	recorder *MockProtocolMockRecorder
}

// MockProtocolMockRecorder is the mock recorder for MockProtocol.
type MockProtocolMockRecorder struct {
	mock *MockProtocol
}

// NewMockProtocol creates a new mock instance.
func NewMockProtocol(ctrl *gomock.Controller) *MockProtocol {
	mock := &MockProtocol{ctrl: ctrl}
	mock.recorder = &MockProtocolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProtocol) EXPECT() *MockProtocolMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockProtocol) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockProtocolMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockProtocol)(nil).Connect))
}

// End mocks base method.
func (m *MockProtocol) End() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "End")
}

// End indicates an expected call of End.
func (mr *MockProtocolMockRecorder) End() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "End", reflect.TypeOf((*MockProtocol)(nil).End))
}

// Start mocks base method.
func (m *MockProtocol) Start(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", ctx)
}

// Start indicates an expected call of Start.
func (mr *MockProtocolMockRecorder) Start(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockProtocol)(nil).Start), ctx)
}

// MockProtoFactory is a mock of ProtoFactory interface.
type MockProtoFactory struct {
	ctrl     *gomock.Controller
	recorder *MockProtoFactoryMockRecorder
}

// MockProtoFactoryMockRecorder is the mock recorder for MockProtoFactory.
type MockProtoFactoryMockRecorder struct {
	mock *MockProtoFactory
}

// NewMockProtoFactory creates a new mock instance.
func NewMockProtoFactory(ctrl *gomock.Controller) *MockProtoFactory {
	mock := &MockProtoFactory{ctrl: ctrl}
	mock.recorder = &MockProtoFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProtoFactory) EXPECT() *MockProtoFactoryMockRecorder {
	return m.recorder
}

// CreateProto mocks base method.
func (m *MockProtoFactory) CreateProto() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateProto")
}

// CreateProto indicates an expected call of CreateProto.
func (mr *MockProtoFactoryMockRecorder) CreateProto() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProto", reflect.TypeOf((*MockProtoFactory)(nil).CreateProto))
}
