info(
	title: "网关内部接口"
	desc: "网关内部接口"
	author: "sunguangyong"
	email: "sungy@xunjikeji.com.cn"
	version: "v1"
)

import(
	"protocol.api"
)

type (
	ProtoDeployResponse {
		FailArray    []DeployMsg `json:"failArray"`    // 失败列表
		SuccessArray []DeployMsg `json:"successArray"` // 成功列表
	}

	DeployMsg {
		ConfigData NeDeviceDataAccessConfig `json:"configData"`
		Msg        string                   `json:"msg"`
	}

	DeployDevice {
		DeviceNid  int64        `json:"deviceNid"` // 设备ID
		ConfigData []ConfigData `json:"configData"`
	}

	ProtoDeployRequest {
		DataList []DeployDevice `json:"list"`
	}

	ProtoStopRequest {
		Nids []int64 `json:"nids"` // 协议id
	}

	ProtoStopResponse {
		SucceedNids []int64 `json:"succeedNids"`
		FailNids    []int64 `json:"failNids"`
	}

	ProtoDeleteResponse {
		SucceedNids []int64 `json:"succeedNids"`
		FailNids    []int64 `json:"failNids"`
	}

	ProtoDeleteRequest {
		Nids []int64 `json:"nids"` // 协议id
	}

	ProtoTestRequest {
		Nid int64 `json:"nid"` // 协议id
	}

	ProtoTestResponse {
		Ok  bool   `json:"ok"`
		Msg string `json:"msg"`
	}

	HeartBeatRequest {
	}

	HeartBeatRequestResponse {
	}

	ConfigData {
		Config NeDeviceDataAccessConfig `json:"config"` // 协议配置
		Point  []NeDeviceDataAccessItem `json:"point"`  // 点表配置
	}

	NeDeviceDataAccessConfig {
		Nid               int64  `json:"nid"`                 // 主键ID
		DeviceNid         int64  `json:"device_nid"`          // 设备ID
		ConfigType        int64  `json:"config_type"`         // 0-读/写,1-只读,2-只写
		ConfigId          string `json:"config_id"`           // 配置ID
		ConfigName        string `json:"config_name"`         // 配置名称
		Endpoint          string `json:"endpoint"`            // 连接URL
		Protocol          string `json:"protocol"`            // 访问协议：ModbusTcp, ModbusRtu, OpcUa, HTTP, MTCONNECT, MITSUBISH_MC, SIEMENS_S7, OMRON_SINS
		JsonAccessOptions string `json:"json_access_options"` // 访问连接基本配置(JSON格式)
		Timeout           int64  `json:"timeout"`             // 连接超时时间
		AgwId             int64  `json:"agw_id"`              // 所属网关ID
		TenantId          int64  `json:"tenant_id"`           // 租户ID
		ProfileNid        int64  `json:"profile_nid"`         // 设备配置文件ID
		CreateTime        string `json:"create_time"`         // 创建时间
		CreateBy          int64  `json:"create_by"`           // 创建者ID
		Issued            int64  `json:"issued"`              // 是否已下发：1-是,0-否
		IssueTime         string `json:"issue_time"`          // 下发时间
	}

	NeDeviceDataAccessItem {
		Nid        int64  `json:"nid"`         // 主键
		DeviceNid  int64  `json:"device_nid"`  // 设备ID
		AgwId      int64  `json:"agw_id"`      // 所属网关ID
		TenantId   int64  `json:"tenant_id"`   // 租户ID
		ConfigNid  int64  `json:"config_nid"`  // ne_device_data_access_config.id
		ConfigType int64  `json:"config_type"` // 0-读/写,1-只读,2-只写
		AccessData string `json:"access_data"` // 读/写配置项(JSON对象)
		CreateTime string `json:"create_time"` // 创建时间
	}
)

// 网关
service apis {
	// TODO 需校验ip是否在白名单
	@doc(
		summary: "获取配置信息"
	)
	// 部署(启动)
	@handler protocolDeploy
	post /api/gateway/interior/protocol/deploy (ProtoDeployRequest) returns (ProtoDeployResponse)
	
	// 停止
	@handler protocolStop
	post /api/gateway/interior/protocol/stop (ProtoStopRequest) returns (ProtoStopResponse)
	
	// 删除
	@handler protocolDelete
	post /api/gateway/interior/protocol/delete (ProtoDeleteRequest) returns (ProtoDeleteResponse)
	
	// 心跳
	@handler heartBeat
	post /api/gateway/interior/heart/beat (HeartBeatRequest) returns (HeartBeatRequestResponse)
}