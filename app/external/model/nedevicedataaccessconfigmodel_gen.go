// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	neDeviceDataAccessConfigFieldNames          = builder.RawFieldNames(&NeDeviceDataAccessConfig{})
	neDeviceDataAccessConfigRows                = strings.Join(neDeviceDataAccessConfigFieldNames, ",")
	neDeviceDataAccessConfigRowsExpectAutoSet   = strings.Join(stringx.Remove(neDeviceDataAccessConfigFieldNames, "`nid`", "`create_time`", "`update_time`"), ",")
	neDeviceDataAccessConfigRowsWithPlaceHolder = strings.Join(stringx.Remove(neDeviceDataAccessConfigFieldNames, "`nid`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	neDeviceDataAccessConfigModel interface {
		Insert(ctx context.Context, data *NeDeviceDataAccessConfig) (sql.Result, error)
		FindOne(ctx context.Context, nid int64) (*NeDeviceDataAccessConfig, error)
		FindOneByDeviceNidConfigName(ctx context.Context, deviceNid int64, configName string) (*NeDeviceDataAccessConfig, error)
		Update(ctx context.Context, data *NeDeviceDataAccessConfig) error
		Delete(ctx context.Context, nid int64) error
	}

	defaultNeDeviceDataAccessConfigModel struct {
		conn  sqlx.SqlConn
		table string
	}

	NeDeviceDataAccessConfig struct {
		Nid               int64     `db:"nid"`                 // 主键ID
		DeviceNid         int64     `db:"device_nid"`          // 设备ID
		ConfigType        int64     `db:"config_type"`         // 0-读/写,1-只读,2-只写
		ConfigId          string    `db:"config_id"`           // 配置ID
		ConfigName        string    `db:"config_name"`         // 配置名称
		Endpoint          string    `db:"endpoint"`            // 连接URL
		Protocol          string    `db:"protocol"`            // 访问协议：ModbusTcp, ModbusRtu, OpcUa, HTTP, MTCONNECT, MITSUBISH_MC, SIEMENS_S7, OMRON_SINS
		JsonAccessOptions string    `db:"json_access_options"` // 访问连接基本配置(JSON格式)
		Timeout           int64     `db:"timeout"`             // 连接超时时间
		AgwId             int64     `db:"agw_id"`              // 所属网关ID
		TenantId          int64     `db:"tenant_id"`           // 租户ID
		ProfileNid        int64     `db:"profile_nid"`         // 设备配置文件ID
		CreateTime        time.Time `db:"create_time"`         // 创建时间
		CreateBy          int64     `db:"create_by"`           // 创建者ID
		Issued            int64     `db:"issued"`              // 是否已下发：1-是,0-否
		IssueTime         time.Time `db:"issue_time"`          // 下发时间
	}
)

func newNeDeviceDataAccessConfigModel(conn sqlx.SqlConn) *defaultNeDeviceDataAccessConfigModel {
	return &defaultNeDeviceDataAccessConfigModel{
		conn:  conn,
		table: "`ne_device_data_access_config`",
	}
}

func (m *defaultNeDeviceDataAccessConfigModel) Insert(ctx context.Context, data *NeDeviceDataAccessConfig) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, neDeviceDataAccessConfigRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DeviceNid, data.ConfigType, data.ConfigId, data.ConfigName, data.Endpoint, data.Protocol, data.JsonAccessOptions, data.Timeout, data.AgwId, data.TenantId, data.ProfileNid, data.CreateBy, data.Issued, data.IssueTime)
	return ret, err
}

func (m *defaultNeDeviceDataAccessConfigModel) FindOne(ctx context.Context, nid int64) (*NeDeviceDataAccessConfig, error) {
	query := fmt.Sprintf("select %s from %s where `nid` = ? limit 1", neDeviceDataAccessConfigRows, m.table)
	var resp NeDeviceDataAccessConfig
	err := m.conn.QueryRowCtx(ctx, &resp, query, nid)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultNeDeviceDataAccessConfigModel) FindOneByDeviceNidConfigName(ctx context.Context, deviceNid int64, configName string) (*NeDeviceDataAccessConfig, error) {
	var resp NeDeviceDataAccessConfig
	query := fmt.Sprintf("select %s from %s where `device_nid` = ? and `config_name` = ? limit 1", neDeviceDataAccessConfigRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, deviceNid, configName)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultNeDeviceDataAccessConfigModel) Update(ctx context.Context, data *NeDeviceDataAccessConfig) error {
	query := fmt.Sprintf("update %s set %s where `nid` = ?", m.table, neDeviceDataAccessConfigRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.DeviceNid, data.ConfigType, data.ConfigId, data.ConfigName, data.Endpoint, data.Protocol, data.JsonAccessOptions, data.Timeout, data.AgwId, data.TenantId, data.ProfileNid, data.CreateBy, data.Issued, data.IssueTime, data.Nid)
	return err
}

func (m *defaultNeDeviceDataAccessConfigModel) Delete(ctx context.Context, nid int64) error {
	query := fmt.Sprintf("delete from %s where `nid` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, nid)
	return err
}

func (m *defaultNeDeviceDataAccessConfigModel) tableName() string {
	return m.table
}
