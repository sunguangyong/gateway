// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	neDeviceFieldNames          = builder.RawFieldNames(&NeDevice{})
	neDeviceRows                = strings.Join(neDeviceFieldNames, ",")
	neDeviceRowsExpectAutoSet   = strings.Join(stringx.Remove(neDeviceFieldNames, "`nid`", "`create_time`", "`update_time`"), ",")
	neDeviceRowsWithPlaceHolder = strings.Join(stringx.Remove(neDeviceFieldNames, "`nid`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	neDeviceModel interface {
		Insert(ctx context.Context, data *NeDevice) (sql.Result, error)
		FindOne(ctx context.Context, nid int64) (*NeDevice, error)
		Update(ctx context.Context, data *NeDevice) error
		Delete(ctx context.Context, nid int64) error
	}

	defaultNeDeviceModel struct {
		conn  sqlx.SqlConn
		table string
	}

	NeDevice struct {
		Nid               int64     `db:"nid"`                 // 设备ID
		DeviceId          string    `db:"device_id"`           // 设备ID
		DeviceName        string    `db:"device_name"`         // 设备名称
		AddrProtocol      string    `db:"addr_protocol"`       // 地址协议
		ConnectProtocol   string    `db:"connect_protocol"`    // 访问协议：MODBUS_TCP, MODBUS_RTU, OPCUA, HTTP, MTCONNECT, MITSUBISH_MC, SIEMENS_S7, OMRON_SINS
		AdminState        string    `db:"admin_state"`         // 管理状态：LOCKED-已锁定,UNLOCKED-正常
		OperatingState    string    `db:"operating_state"`     // 操作状态：enabled-正常,disabled-禁用
		DeviceLabels      string    `db:"device_labels"`       // 设备标签
		DeviceLocations   string    `db:"device_locations"`    // 设备位置
		AddrId            string    `db:"addr_id"`             // 设备地址ID(暂不使用)
		DeviceServiceName string    `db:"device_service_name"` // 设备服务名称
		ProfileNid        int64     `db:"profile_nid"`         // 设备配置文件ID
		AgwId             int64     `db:"agw_id"`              // 网关ID
		TenantId          int64     `db:"tenant_id"`           // 租户ID
		CreateTime        time.Time `db:"create_time"`         // 设备创建时间
		CreateBy          int64     `db:"create_by"`           // 设备创建人
		Issued            int64     `db:"issued"`              // 是否已经下发：1-是，0-否
		IssueTime         time.Time `db:"issue_time"`          // 下发时间
		DeviceStatus      int64     `db:"device_status"`       // 0---离线 1---- 在线
		DeviceDesc        string    `db:"device_desc"`         // 设备描述
		DeviceEncoding    string    `db:"device_encoding"`     // 设备编码
		DeviceModel       string    `db:"device_model"`        // 设备型号
	}
)

func newNeDeviceModel(conn sqlx.SqlConn) *defaultNeDeviceModel {
	return &defaultNeDeviceModel{
		conn:  conn,
		table: "`ne_device`",
	}
}

func (m *defaultNeDeviceModel) Insert(ctx context.Context, data *NeDevice) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, neDeviceRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DeviceId, data.DeviceName, data.AddrProtocol, data.ConnectProtocol, data.AdminState, data.OperatingState, data.DeviceLabels, data.DeviceLocations, data.AddrId, data.DeviceServiceName, data.ProfileNid, data.AgwId, data.TenantId, data.CreateBy, data.Issued, data.IssueTime, data.DeviceStatus, data.DeviceDesc, data.DeviceEncoding, data.DeviceModel)
	return ret, err
}

func (m *defaultNeDeviceModel) FindOne(ctx context.Context, nid int64) (*NeDevice, error) {
	query := fmt.Sprintf("select %s from %s where `nid` = ? limit 1", neDeviceRows, m.table)
	var resp NeDevice
	err := m.conn.QueryRowCtx(ctx, &resp, query, nid)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultNeDeviceModel) Update(ctx context.Context, data *NeDevice) error {
	query := fmt.Sprintf("update %s set %s where `nid` = ?", m.table, neDeviceRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.DeviceId, data.DeviceName, data.AddrProtocol, data.ConnectProtocol, data.AdminState, data.OperatingState, data.DeviceLabels, data.DeviceLocations, data.AddrId, data.DeviceServiceName, data.ProfileNid, data.AgwId, data.TenantId, data.CreateBy, data.Issued, data.IssueTime, data.DeviceStatus, data.DeviceDesc, data.DeviceEncoding, data.DeviceModel, data.Nid)
	return err
}

func (m *defaultNeDeviceModel) Delete(ctx context.Context, nid int64) error {
	query := fmt.Sprintf("delete from %s where `nid` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, nid)
	return err
}

func (m *defaultNeDeviceModel) tableName() string {
	return m.table
}
