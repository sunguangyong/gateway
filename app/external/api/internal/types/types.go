// Code generated by goctl. DO NOT EDIT.
package types

type OpcUaJsonOptions struct {
	Protocol string `json:"protocol"` // 协议名称
	UserName string `json:"userName"` // 用户名
	PassWd   string `json:"passWd"`   // 密码
	Policy   string `json:"policy"`   // 端点2 加密策略
	Mode     string `json:"mode"`     // 端点1 模式
	Cert     bool   `json:"cert"`     // 是否需要证书
}

type OpcUaJsonItems struct {
	Protocol string `json:"protocol"` // 协议名称
	NodeId   string `json:"nodeId"`   // 节点Id
	DataName string `json:"dataName"` // 数据名称
	Method   string `json:"method"`   // 读取方法
}

type ModbusTcpJsonOptions struct {
	Protocol string `json:"protocol"` // 协议类型
	SlaveId  byte   `json:"slaveId"`  // 从站地址
}

type ModbusTcpJsonItems struct {
	Protocol string `json:"protocol"` // 协议
	Address  uint16 `json:"address"`  // 地址位
	DataName string `json:"dataName"` // 数据名称
	Method   string `json:"method"`   // 读取方法
}

type ModbusRtuJsonOptions struct {
	Protocol string `json:"protocol"` // 协议名称
	SlaveId  byte   `json:"slaveId"`  // 从站地址
	BaudRate int    `json:"baudRate"` // 波特率
	DataBits int    `json:"dataBits"` // 数据位
	StopBits int    `json:"stopBits"` // 停止位
	Parity   string `json:"parity"`   // 校验方式
}

type ModbusRtuJsonItems struct {
	Protocol string `json:"protocol"` // 协议
	Address  uint16 `json:"address"`  // 地址位
	DataName string `json:"dataName"` // 数据名称
	Method   string `json:"method"`   // 读取方法
}

type ProtocolTestRequest struct {
	AgwId       int64   `json:"agwId"`       // 网关id
	NeDeviceIds []int64 `json:"neDeviceIds"` // 设备id
}

type ProtocolTestResponse struct {
	DeviceName  string    `json:"deviceName"`
	Timestamp   string    `json:"timestamp"`
	ContentList []Content `json:"contentList"`
}

type Content struct {
	Addr      interface{} `json:"addr"`
	AddrValue interface{} `json:"addrValue"`
}

type ProtocolWriteTestRequest struct {
	AgwId      int64  `json:"agwId"`      // 网关id
	Address    uint16 `json:"address"`    // 地址位
	Method     string `json:"method"`     // 属性方法
	NeDeviceId int64  `json:"neDeviceId"` // 设备id
	ConfigNid  int64  `json:"configNid"`  // 协议id
	DataName   string `json:"dataName"`   // 属性名
	Nid        int64  `json:"nid"`        // 点表id
	Value      string `json:"value"`      // 写入值
}

type ProtocolWriteTestResponse struct {
}

type EdgeDeviceSaveRequest struct {
	EdgeDeviceId   int64  `json:"edgeDeviceId"`   // 网关id 新增 0
	EdgeDeviceName string `json:"edgeDeviceName"` // 网关名称
	DevicePosition string `json:"devicePosition"` // 网关位置
	IpAddress      string `json:"ipAddress"`      // ip地址
	Mac            string `json:"mac"`            //mac 地址
	DeviceDesc     string `json:"deviceDesc"`     // 设备描述
	SimCard        string `json:"simCard"`        //sim 卡
	GatewayId      int64  `json:"gatewayId"`      // 网关型号
}

type EdgeDeviceSaveResponse struct {
}

type EdgeDeviceDeleteRequest struct {
	EdgeDeviceIds []int64 `json:"edgeDeviceIds"` // 网关id
}

type EdgeDeviceDeleteResponse struct {
}

type EdgeDeviceListRequest struct {
	PageIndex int64 `json:"pageIndex"` //页码索引
	PageSize  int64 `json:"pageSize"`  //页码大小
}

type EdgeDeviceListResponse struct {
	Data  []EdgeDeviceData `json:"data"`  // 返回值
	Count int64            `json:"count"` // 总数
}

type EdgeDeviceListExportRequest struct {
	PageIndex int64 `json:"pageIndex"` //页码索引
	PageSize  int64 `json:"pageSize"`  //页码大小
}

type EdgeDeviceListExportResponse struct {
	Data  []EdgeDeviceData `json:"data"`  // 返回值
	Count int64            `json:"count"` // 总数
}

type EdgeDeviceData struct {
	EdgeDeviceId   int64  `json:"edgeDeviceId"`   // 网关id 新增 0
	EdgeDeviceName string `json:"edgeDeviceName"` // 网关名称
	DevicePosition string `json:"devicePosition"` // 网关位置
	IpAddress      string `json:"ipAddress"`      // ip地址
	Mac            string `json:"mac"`            //mac 地址
	DeviceDesc     string `json:"deviceDesc"`     // 设备描述
	SimCard        string `json:"simCard"`        //sim 卡
	GatewayId      int64  `json:"gatewayId"`      // 网关型号
	Status         int64  `json:"status"`         // 1 在线/0 离线
}

type HeartBeatRequest struct {
	EdgeDeviceId int64 `json:"edgeDeviceId"` // 配置Id
}

type HeartBeatRequestResponse struct {
}

type NeDeviceSaveRequest struct {
	Nid             int64  `json:"nid"`             // 设备ID
	DeviceName      string `json:"deviceName"`      // 设备名称
	DeviceDesc      string `json:"deviceDesc"`      // 设备描述
	ConnectProtocol string `json:"connectProtocol"` // 连接协议
	AgwId           int64  `json:"agwId"`           // 网关ID
}

type NeDeviceSaveResponse struct {
}

type NeDeviceDeleteRequest struct {
	AgwId       int64   `json:"agwId"`       // 网关ID
	NeDeviceIds []int64 `json:"neDeviceIds"` // 设备id
}

type NeDeviceDeleteResponse struct {
}

type NeDeviceListRequest struct {
	EdgeDeviceId int64 `json:"edgeDeviceId"` // 网关设备ID
	PageIndex    int64 `json:"pageIndex"`    //页码索引
	PageSize     int64 `json:"pageSize"`     //页码大小
}

type NeDeviceListResponse struct {
	Data  []NeDeviceList `json:"data"`  // 数量
	Count int64          `json:"count"` // 总数
}

type NeDeviceList struct {
	Nid             int64  `json:"nid"`             // 设备ID
	DeviceName      string `json:"deviceName"`      // 设备名称
	ConnectProtocol string `json:"connectProtocol"` // 访问协议
	DeviceLocations string `json:"deviceLocations"` // 设备位置
	AgwId           int64  `json:"agwId"`           // 网关ID
	Issued          int64  `json:"issued"`          // 是否下发 1-是，0-否
	CreateTime      string `json:"createTime"`      // 设备创建时间
	DeviceStatus    int64  `json:"deviceStatus"`    // 0---离线 1---- 在线
}

type PointSaveRequest struct {
	Nid           int64                  `json:"nid"`           // 点表id 新增 0
	AgwId         int64                  `json:"agwId"`         // 网关id
	DeviceNid     int64                  `json:"deviceNid"`     // 设备id
	ConfigType    int64                  `json:"configType"`    // 0-读/写,1-只读,2-只写
	ConfigNid     int64                  `json:"configNid"`     // 协议配置id
	AccessOptions map[string]interface{} `json:"accessOptions"` // 点表配置 显示为string 类型实际为json 类型 根据协议不同参数类型不固定详细字段查看 Models	ModbusRtuJsonItems、ModbusTcpJsonItems、ModbusTcpJsonItems
}

type PointSaveResponse struct {
}

type PointDelRequest struct {
	Nids []int64 `json:"nids"` // 点表id
}

type PointDelResponse struct {
}

type PointDelAllRequest struct {
	ConfigNid int64 `json:"configNid"` // 协议id
}

type PointDelAllResponse struct {
}

type WritepointList struct {
	Nid       int64  `json:"nid"`       // 点位 id
	Address   uint16 `json:"address"`   // 地址位
	ConfigNid int64  `json:"configNid"` // 协议配置id
	DataName  string `json:"dataName"`  // 属性名
	Method    string `json:"method"`    // 属性方法
}

type PointListRequest struct {
	ConfigNid int64 `json:"configNid"` // 协议配置id
	PageIndex int64 `json:"pageIndex"` //页码索引
	PageSize  int64 `json:"pageSize"`  //页码大小
}

type WritepointListResponse struct {
	Data []WritepointList `json:"data"`
}

type PointData struct {
	Nid           int64                  `json:"nid"`           // 点表id
	ConfigType    int64                  `json:"configType"`    // 0-读/写,1-只读,2-只写
	ConfigNid     int64                  `json:"configNid"`     // 协议配置id
	AccessOptions map[string]interface{} `json:"accessOptions"` //类型实际为json 类型 根据协议不同参数类型不固定详细字段查看	ModbusRtuJsonItems、ModbusTcpJsonItems、OpcuaJsonItems
}

type WritePointListRequest struct {
	AgwId      int64 `json:"agwId"`      // 网关id
	ConfigType int64 `json:"configType"` // 0-读/写,1-只读,2-只写
	NeDeviceId int64 `json:"neDeviceId"` // 设备id
}

type PointListResponse struct {
	DataList []PointData `json:"list"`  // 数据列表
	Count    int64       `json:"count"` // 总数
}

type WritePointResponse struct {
	DataList []PointData `json:"list"` // 数据列表
}

type ProtocolSaveRequest struct {
	Nid           int64                  `json:"nid"`           // 协议配置id 新增 0
	Protocol      string                 `json:"protocol"`      // 协议名称
	DeviceNid     int64                  `json:"deviceNid"`     // 设备ID
	AgwId         int64                  `json:"agwId"`         // 所属网关ID
	ConfigType    int64                  `json:"configType"`    // 0-读/写,1-只读,2-只写
	ConfigName    string                 `json:"configName"`    // 配置名称
	Endpoint      string                 `json:"endpoint"`      // 连接URL
	AccessOptions map[string]interface{} `json:"accessOptions"` // 访问连接配置 显示为string 类型实际为json 类型 根据协议不同参数类型不固定详细字段查看Models（ModbusRtuJsonOptions、ModbusTcpJsonOptions、OpcUaJsonOptions）
}

type ProtocolSaveResponse struct {
	Data string `json:"data"`
}

type ExportConfigRequest struct {
	AgwId int64 `json:"agwId"` // 所属网关ID
}

type ExportConfigResponse struct {
}

type ProtocolDelRequest struct {
	Nids []int64 `json:"nids"` // 协议id
}

type ProtocolDelResponse struct {
	DeviceNid int64 `json:"deviceNid"` // 设备id
}

type ProtocolListRequest struct {
	DeviceNid int64 `json:"deviceNid"` // 设备id
}

type ProtocolListResponse struct {
	Data []ProtocolGain `json:"data"`
}

type ProtocolGain struct {
	Nid           int64                  `json:"nid"`           // 协议配置id
	Protocol      string                 `json:"protocol"`      // 协议名称
	DeviceNid     int64                  `json:"deviceNid"`     // 设备ID
	AgwId         int64                  `json:"agwId"`         // 所属网关ID
	ConfigType    int64                  `json:"configType"`    // 0-读/写,1-只读,2-只写
	ConfigName    string                 `json:"configName"`    // 配置名称
	Endpoint      string                 `json:"endpoint"`      // 连接信息
	Issued        int64                  `json:"issued"`        // 是否已经下发：1-是，0-否
	IssueTime     string                 `json:"issueTime"`     // 下发时间
	AccessOptions map[string]interface{} `json:"accessOptions"` // 访问连接配置 显示为string 类型实际为json 类型 根据协议不同参数类型不固定详细字段查看 Models（ModbusRtuJsonOptions、ModbusTcpJsonOptions、OpcUaJsonOptions）
}

type ProtocolDeployRequest struct {
	AgwId       int64   `json:"agwId"`       // 网关id
	NeDeviceIds []int64 `json:"neDeviceIds"` // 设备id
}

type ProtocolDeployResponse struct {
	FailArray    []DeployArray `json:"failArray"`    // 失败列表
	SuccessArray []DeployArray `json:"successArray"` // 成功列表
}

type DeployArray struct {
	Nid        int64  `json:"nid"`        // 协议id
	ConfigName string `json:"configName"` // 协议名字
	DeviceNid  int64  `json:"deviceNid"`  // 设备ID
	DeviceName string `json:"deviceName"` // 设备名字
	Msg        string `json:"msg"`        // 错误描述信息
}

type ProtoDropDownRequest struct {
}

type Dropdown struct {
	Value interface{} `json:"value"`
	Label interface{} `json:"label"`
}

type ProtoDropDownResponse struct {
	List []Dropdown `json:"list"` // 数据
}

type ProtoConfigDropDownRequest struct {
	Protocol string `json:"protocol"` // 协议名称
}

type ProtoConfigDropDownResponse struct {
	DropDown map[string]interface{} `json:"dropDown"` // 对应的下拉框与保存接口的配置信息字段一致
}

type ConfigSaveRequest struct {
	Nid           string            `json:"nid"`           // id
	Protocol      string            `json:"protocol"`      // 协议名称
	DeviceNid     string            `json:"deviceNid"`     // 设备id
	AgwId         string            `json:"agwId"`         // 网关id
	ConfigType    int               `json:"configType"`    // 0-读/写,1-只读,2-只写
	ConfigName    string            `json:"configName"`    // 配置名称
	Endpoint      string            `json:"endpoint"`      // 连接信息
	AccessOptions AccessOptionsData `json:"accessOptions"` // 访问连接配置
}

type AccessOptionsData struct {
	Protocol     string `json:"protocol"` // 协议名称
	AgwId        string `json:"agwId"`    // 网关id
	SlaveId      string `json:"slaveId"`  // 从站地址
	Offset       string `json:"offset"`
	FunctionCode string `json:"functionCode"`
	Quantity     string `json:"quantity"`
	AddParam     string `json:"addParam"`
}

type ConfigSaveResponse struct {
}
